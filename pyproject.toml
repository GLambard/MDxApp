# MDxApp Project Configuration
# Contains settings for Black, Ruff, Mypy, and other Python tools

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mdxapp"
version = "2.0.0"
description = "Medical Diagnosis Assistant powered by ChatGPT"
authors = [{name = "Guillaume Lambard"}]
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}

# ============================================
# Black - Code Formatting
# ============================================
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | venv
  | env
  | build
  | dist
  | \.eggs
  | \.pytest_cache
  | \.mypy_cache
  | \.ruff_cache
  | __pycache__
  | htmlcov
)/
'''

# ============================================
# Ruff - Fast Python Linter
# ============================================
[tool.ruff]
# Set the maximum line length to 100
line-length = 100

# Assume Python 3.8+
target-version = "py38"

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "__pycache__",
    "htmlcov",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by Black)
    "B008",   # Do not perform function calls in argument defaults
    "B905",   # zip() without an explicit strict= parameter
    "N802",   # Function name should be lowercase (allows PascalCase for Pydantic)
    "N803",   # Argument name should be lowercase
    "SIM102", # Use single if statement (sometimes nested is clearer)
]

# Allow fix for all enabled rules (when using --fix)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when they start with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, etc.
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.mccabe]
# Maximum allowed complexity
max-complexity = 10

# ============================================
# Mypy - Static Type Checking
# ============================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

# Be less strict for now, can tighten later
disallow_untyped_calls = false
disallow_incomplete_defs = true
disallow_untyped_decorators = false

# Output configuration
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude directories
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

# Per-module options
[[tool.mypy.overrides]]
# Third-party libraries without type stubs
module = [
    "streamlit.*",
    "streamlit_extras.*",
    "openai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Tests can be less strict
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# ============================================
# Pytest Configuration
# ============================================
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "api: Tests that call external APIs",
]

# ============================================
# Coverage Configuration
# ============================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ============================================
# isort Configuration
# ============================================
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src"]
skip_gitignore = true

# ============================================
# Bandit - Security Linter
# ============================================
[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    ".venv",
]
skips = [
    "B101",  # Use of assert (common in tests)
    "B601",  # Paramiko calls (we don't use it)
]

